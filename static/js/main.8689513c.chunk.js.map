{"version":3,"sources":["redux/Contacts/contacts-selectors.js","redux/Contacts/contacts-operations.js","components/Form/Form.js","redux/Contacts/contacts-acions.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/Contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","contact","name","toLowerCase","includes","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","number","post","deleteContact","contactId","delete","id","Form","useState","setName","setNumber","useSelector","dispatch","useDispatch","clearForm","onSubmit","event","preventDefault","some","elm","alert","Input","className","type","autoComplete","autoFocus","pattern","title","required","value","onChange","e","target","Button","variant","disabled","filterContacts","createAction","Filter","ContactList","filteredContacts","useEffect","TableContainer","Table","sx","maxWidth","size","align","TableHead","TableRow","TableCell","scope","TableBody","map","color","onClick","App","Container","fontSize","createReducer","fulfilled","payload","combineReducers","store","configureStore","reducer","contactsReducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8689513c.chunk.js","sourcesContent":["export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getFilteredContacts = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n    return contacts.filter(contact => {\r\n        return contact.name.toLowerCase().includes(filter.toLowerCase());\r\n    })\r\n}\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://619684adaf46280017e7e138.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n    'contacts/fetchContacts',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.get('/contacts');\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n    'contacts/addContact',\r\n    async ({ name, number }, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.post('/contacts', { name, number });\r\n            return data;\r\n        } catch (error) {\r\n            rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n    'contacts/deleteContact',\r\n    async (contactId, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.delete(`/contacts/${contactId}`);\r\n            return data.id;\r\n        } catch (error) {\r\n            rejectWithValue(error);\r\n        }\r\n    },\r\n);","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContacts } from '../../redux/Contacts/contacts-selectors';\r\nimport { addContact } from '../../redux/Contacts/contacts-operations';\r\nimport { Button, Input } from '@mui/material'\r\n\r\n\r\nfunction Form() {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const contacts = useSelector(getContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (contacts.some(elm => elm.name === name)) {\r\n            return alert(`${name} is already in contacts`);\r\n        } else {\r\n            dispatch(addContact({ name, number }));\r\n        }\r\n        clearForm();\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <section>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>Name\r\n                        <Input className=\"input\"\r\n                            type=\"text\"\r\n                            autoComplete='off'\r\n                            autoFocus='true'\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                    </label>\r\n                    <label >Number\r\n                        <Input className=\"input\"\r\n                            type=\"tel\"\r\n                            autoComplete='off'\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                            value={number}\r\n                            onChange={e => setNumber(e.target.value)}\r\n                        />\r\n                    </label>\r\n                    <Button type='submit' variant=\"contained\" disabled={!name || !number}>Add</Button>\r\n                </form>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n\r\n\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const filterContacts = createAction('contacts/filterContacts');","// import PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../../redux/Contacts/contacts-selectors';\r\nimport { filterContacts } from '../../redux/Contacts/contacts-acions'\r\nimport { Input } from '@mui/material'\r\n\r\nfunction Filter() {\r\n\r\n    const filter = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <label>\r\n            Find contact by name\r\n            <Input className=\"input\"\r\n                type=\"text\"\r\n                value={filter}\r\n                onChange={event => dispatch(filterContacts(event.target.value))}\r\n            >\r\n            </Input>\r\n        </label>\r\n\r\n    )\r\n};\r\nexport default Filter;\r\n\r\n// Filter.propTypes = {\r\n//     value: PropTypes.string.isRequired,\r\n//     onChange: PropTypes.func.isRequired\r\n// };","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchContacts, deleteContact } from '../../redux/Contacts/contacts-operations'\r\nimport { getFilteredContacts } from '../../redux/Contacts/contacts-selectors'\r\nimport { useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n} from '@mui/material'\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\n\r\n\r\n\r\nfunction ContactList() {\r\n    const filteredContacts = useSelector(getFilteredContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer >\r\n                <Table sx={{ maxWidth: 600 }} size=\"small\" align=\"center\" aria-label=\"contacts\" >\r\n                    <TableHead>\r\n                    </TableHead>\r\n\r\n                    <TableRow>\r\n                        <TableCell scope=\"col\" align=\"left\"></TableCell>\r\n                        <TableCell scope=\"col\" align=\"left\" size=\"md\">Name</TableCell>\r\n                        <TableCell scope=\"col\" align=\"left\" size=\"md\">Phone number</TableCell>\r\n                    </TableRow>\r\n                    <TableBody >\r\n                        {filteredContacts.map(({ id, name, number }) =>\r\n                        (<TableRow key={id} id={id}>\r\n                            <TableCell >\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    color=\"error\"\r\n                                    type=\"button\"\r\n                                    onClick={() => dispatch(deleteContact(id))}\r\n                                ><DeleteForeverIcon size=\"small\" />\r\n                                </Button>\r\n\r\n\r\n                            </TableCell>\r\n                            <TableCell>{name}</TableCell>\r\n                            <TableCell>{number}</TableCell>\r\n                        </TableRow>))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactList;\r\n","\nimport Form from \"./components/Form/Form\"\nimport Filter from './components/Filter/Filter';\nimport ContactList from \"./components/ContactList/ContactList\"\nimport \"./base.css\";\nimport { Container } from '@mui/material';\nimport MenuBookRoundedIcon from '@mui/icons-material/MenuBookRounded';\n\nfunction App() {\n  return (\n    <Container max-width='sm'>\n      <h1>Phonebook <MenuBookRoundedIcon fontSize=\"large\" color=\"inherit\" /></h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  )\n\n}\n\nexport default App;\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { filterContacts } from \"./contacts-acions\";\r\nimport { fetchContacts, addContact, deleteContact } from \"./contacts-operations\";\r\n\r\nconst initialFilter = \"\";\r\n\r\nconst items = createReducer([], {\r\n    [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n    [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\r\n    [deleteContact.fulfilled]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\n\r\nconst filter = createReducer(initialFilter, {\r\n    [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducers from './Contacts/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducers,\r\n    }\r\n\r\n});\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport 'modern-normalize/modern-normalize.css';\nimport store from '../src/redux/store.js'\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}